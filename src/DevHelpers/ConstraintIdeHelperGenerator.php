<?php

namespace Shrd\Laravel\JwtTokens\DevHelpers;

use Illuminate\Support\Carbon;
use ReflectionParameter;
use RuntimeException;
use Shrd\Laravel\JwtTokens\Contracts\ConstraintFactory;
use Shrd\Laravel\JwtTokens\Contracts\IntrospectableConstraintFactory;
use UnitEnum;

class ConstraintIdeHelperGenerator
{
    protected IntrospectableConstraintFactory $constraintFactory;

    public function __construct(ConstraintFactory $constraintFactory)
    {
        if(!($constraintFactory instanceof IntrospectableConstraintFactory)) {
            throw new RuntimeException(get_class($constraintFactory).' is not a '.IntrospectableConstraintFactory::class);
        }
        $this->constraintFactory = $constraintFactory;
    }

    private function valueToDocString(mixed $value): string
    {
        if(is_null($value)) {
            return 'null';
        }

        if(is_int($value)) {
            return strval($value);
        }

        if(is_bool($value)) {
            return $value ? 'true' : 'false';
        }

        if(is_string($value)) {
            return "'$value'";
        }

        if(is_array($value)) {
            $parts = array_map($this->valueToDocString(...), $value);
            $inner = implode(', ', $parts);
            return "[$inner]";
        }

        if($value instanceof UnitEnum) {
            return get_class($value).'::'.$value->name;
        }

        return "?";
    }

    private function parameterToDocString(ReflectionParameter $parameter): string
    {
        $name = $parameter->getName();

        $result = "";

        if(!is_null($type = $parameter->getType())) {
            $result .= $type.' ';
        }

        if($parameter->isVariadic()) {
            $result .= "...";
        }

        if($parameter->isPassedByReference()) {
            $result .= "&";
        }

        $result .= '$'.$name;

        if($parameter->isOptional() && $parameter->isDefaultValueAvailable()) {
            if($parameter->isDefaultValueConstant()) {
                return $result . " = " . $parameter->isDefaultValueConstant();
            }

            if($parameter->isDefaultValueAvailable()) {
                $defaultValue = $parameter->getDefaultValue();
                return $result . " = " . $this->valueToDocString($defaultValue);
            }

            if($parameter->allowsNull()) {
                return $result . " = null";
            }

            return $result . " = ?";
        }

        return $result;
    }

    public function getParametersString(string $constraint): string
    {
        $parameters = $this->constraintFactory->getConstraintParameters($constraint);

        return implode(', ', array_map($this->parameterToDocString(...), $parameters));
    }

    public function getMethodString(string $constraint): string
    {
        return "$constraint(".$this->getParametersString($constraint).")";
    }

    public function getMethodDocDirective(string $constraint, string $returnValue = '$this'): string
    {
        return "@method $returnValue ".$this->getMethodString($constraint);
    }

    public function getMethodDocDirectives(string $prefix = ' * ', string $returnValue = '$this'): string
    {
        $methods = array_map(
            fn($constraint) => $prefix . $this->getMethodDocDirective($constraint, $returnValue),
            $this->constraintFactory->constraintNames()
        );

        return implode("\n", $methods);
    }

    public function getTokenValidatorStub(): string
    {

        $methods = $this->getMethodDocDirectives('     * ');

        return <<<PHP
            namespace Shrd\Laravel\JwtTokens\Validation {
                /**
                 * A wrapper around a token that provides a convenient API to validate a token.
                 * It generates constraints using its constraint factory and applies them to the token.
                 * Any constraint violations thrown by those constraints are caught and collected, so that they can
                 * be analysed together using the `violations` method or thrown as a group using the `validate` method.
                 *
                 * You may use the @see \Shrd\Laravel\JwtTokens\Contracts\TokenValidatorFactory instance of the
                 * application to initialize a new token validator.
                 *
                 * This doc-block is automatically generated by the
                 * `\Shrd\Laravel\JwtTokens\DevHelpers\ConstraintIdeHelperGenerator` class to enable type-hinting for
                 * the magic call constraint constructors. They include all constraint constructors that are currently
                 * defined in the applications @see \Shrd\Laravel\JwtTokens\Contracts\ConstraintFactory .
                 *
            $methods
                 */
                 class TokenValidator {}
            }
            PHP;
    }

    public function getHelperFileContents(): string
    {
        $tokenValidatorStub = $this->getTokenValidatorStub();

        return <<<PHP

            $tokenValidatorStub

            PHP;
    }
}
